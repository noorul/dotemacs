#+TITLE: Mike Zamansky's Emacs configuration
#+STARTUP: overview
#+OPTIONS: toc:4 h:4
Use tab on each section to cycle through expanding and hiding sections
* Notes
** Thanks
Most of this file was taken from Sacha Chua's configuration. She's
shared tons of really awesome emacs stuff and I'd encourage everyone
to google her and check out her work.

** First time
use **M-x package-refresh-contents** the first time you load this, then
exit emacs and start again.

Also do this when you change package sources.
** Commenting out sections
You can copy sections to your own myinit.org but if you want to use
this and "comment out" chunks, the easiest w
ay is to add ":tangle no"
to the end of the begin_src lines -- see the init.el section for 
an examplqe 
** To install pcackages automatically use
#+begin_src emacs-lisp :tangle no

  ;; usepackage notes
  ;; :init - do before loaded
  ;; :config after after loaded
  ;; : preface - not sure but it's there
  (use-package smart-mode-line
    :ensure smart-mode-line
    :init 
    (progn
      (setq sml/no-confirm-load-theme t)
      (sml/setup)
      (sml/apply-theme 'powerline)))
#+end_src

* Packages TO LOOK AT OR INSTALL LATER
- Hydra - installed look at config
* The init.el

The content between the begin_src and end_src should
be written to a file named init.el in your .emacs.d directory
the other file you should place there is this file (myinit.org)

It will load when emacs starts and then it will run everything in 
this file

#+begin_src emacs-lisp :tangle no
  (package-initialize nil)
  (add-to-list 'load-path "~/.emacs.d/packages/lisp")
  (require 'package)

  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list 'package-archives
               '("gnu" . "http://elpa.gnu.org/packages/") t)

  ;; Override the packages with the git version of Org and other packages
  (package-initialize t)
  (setq package-enable-at-startup nil)
  (require 'org)
  (require 'ob-tangle)
  (org-babel-load-file (expand-file-name "~/.emacs.d/myinit.org"))

  (custom-set-variables
   '(inhibit-startup-screen t))
  #+end_src

* Basic Configuration and setup
** Set up use-package
#+BEGIN_SRC emacs-lisp
;; Bootstrap `use-package'
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC

** Set initial size -- this isn't tangled right now
#+BEGIN_SRC emacs-lisp :tangle no
(set-face-attribute 'default nil':height 150)
(setq default-frame-alist
      '((top . 10) (left . 1000)
        (width . 90) (height . 50)
        ))
#+END_SRC
** Secrets 
Stuff we don't want on github.
#+begin_src emacs-lisp
(load "~/.emacs.secrets" t)
#+end_src

** Personal info
#+begin_src emacs-lisp
  (setq user-full-name "Mike Zamansky"
        user-mail-address "zamansky@gmail.com")
#+end_src
* General Configuration
** Misc interface settings

#+begin_src emacs-lisp
(setq inhibit-startup-message t)

; periodically automatically revert to what's on disk 
; this makes it easier to keep files using btsync or dropbox
; in sync since I frequently forget to save them
(global-auto-revert-mode 1)
(setq auto-revert-verbose nil)
(global-set-key (kbd "<f5>") 'revert-buffer)

(tool-bar-mode -1)

#+end_src
** Hungry Delete
#+begin_src emacs-lisp
(use-package hungry-delete
:ensure t
:config (global-hungry-delete-mode))


#+end_src
** iedit
#+BEGIN_SRC emacs-lisp
(use-package iedit
:ensure t
)

#+END_SRC

#+RESULTS:

** Expand Region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
  :ensure t
  :config
  (progn (global-set-key (kbd "C-=") 'er/expand-region)))

#+END_SRC

#+RESULTS:

** fill column indicator
#+BEGIN_SRC emacs-lisp
(use-package fill-column-indicator
:ensure t
:init (progn
(setq fci-rule-column 90)
))
#+END_SRC

#+RESULTS:

** Hydra - need to re-evaluate this
#+begin_src emacs-lisp
  (use-package hydra 
  :ensure hydra
  :init (progn

          (global-set-key
           (kbd "C-x t")
           (defhydra toggle (:color blue)
             "toggle"
             ("a" abbrev-mode "abbrev")
             ("d" toggle-debug-on-error "debug")
             ("c" fci-mode "fCi")
             ("f" auto-fill-mode "fill")
             ("t" toggle-truncate-lines "truncate")
             ("w" whitespace-mode "whitespace")
             ("q" nil "cancel")))
          (global-set-key
           (kbd "C-x j")
           (defhydra gotoline 
               ( :pre (linum-mode 1)
                      :post (linum-mode -1))
             "goto"
             ("t" (lambda () (interactive)(move-to-window-line-top-bottom 0)) "top")
             ("b" (lambda () (interactive)(move-to-window-line-top-bottom -1)) "bottom")
             ("m" (lambda () (interactive)(move-to-window-line-top-bottom)) "middle")
             ("e" (lambda () (interactive)(end-of-buffer)) "end")
             ("c" recenter-top-bottom "recenter")
             ("n" next-line "down")
             ("p" (lambda () (interactive) (forward-line -1))  "up")
             ("g" goto-line "goto-line")
             ))
          (global-set-key
           (kbd "C-x w")
           (defhydra hydra-window ()
             "window"
             ("h" windmove-left)
             ("j" windmove-down)
             ("k" windmove-up)
             ("l" windmove-right)
             ("a" (lambda ()
                    (interactive)
                    (ace-window 1)
                    (add-hook 'ace-window-end-once-hook
                              'hydra-window/body)
                    (throw 'hydra-disable t))
              "ace")
             ("v" (lambda ()
                    (interactive)
                    (split-window-right)
                    (windmove-right))
              "vert")
             ("x" (lambda ()
                    (interactive)
                    (split-window-below)
                    (windmove-down))
              "horz")
             ("s" (lambda ()
                    (interactive)
                    (ace-window 4)
                    (add-hook 'ace-window-end-once-hook
                              'hydra-window/body)
                    (throw 'hydra-disable t))
              "swap")
             ("t" transpose-frame "'")
             ("d" (lambda ()
                    (interactive)
                    (ace-window 16)
                    (add-hook 'ace-window-end-once-hook
                              'hydra-window/body)
                    (throw 'hydra-disable t))
              "del")
             ("o" delete-other-windows "one" :color blue)
             ("i" ace-maximize-window "ace-one" :color blue)
             ("q" nil "cancel")))))
#+end_src

#+RESULTS:
** Which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
:ensure t
:config
(progn
;(which-key-setup-side-window-right-bottom)
(which-key-setup-minibuffer)
;(which-key-setup-side-window-bottom)
;(which-key-setup-side-window-right)
(which-key-mode)
))
#+END_SRC

#+RESULTS:
: t
** Change "yes or no" to "y or n"

Lazy people like me never want to type "yes" when "y" will suffice.

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)   
#+end_src

** Theme
#+BEGIN_SRC emacs-lisp
  ;(set-background-color "Oldlace")
  ;(setq default-frame-alist
  ;     '((background-color . "Oldlace")
  ;        ))
  
;  (sacha/package-install 'color-theme)
;  (use-package diff-mode)
;  (use-package color-theme
;   :init (progn
;           (color-theme-initialize)
;           (color-theme-subtle-hacker)
;           ))

(use-package color-theme
:ensure t)
;(use-package spacemacs-theme
;:ensure t
;:init
;(load-theme 'spacemacs-dark t))

(use-package zenburn-theme
:ensure t
:init (load-theme 'zenburn t) )
#+END_SRC

#+RESULTS:

** Mode line format

Display a more compact mode line

#+begin_src emacs-lisp :tangle no
(use-package      smart-mode-line-powerline-theme
    :ensure smart-mode-line-powerline-theme)
  (use-package smart-mode-line
    :ensure smart-mode-line
    :init 
    (progn
    (setq sml/no-confirm-load-theme t)
    (sml/setup)
    (sml/apply-theme 'powerline))
)

#+end_src

#+BEGIN_SRC emacs-lisp
(use-package spaceline
:ensure t
:init (progn
(require 'spaceline-config)
(spaceline-spacemacs-theme)
))
#+END_SRC

#+RESULTS:

Hide minor modes I care less about:

#+begin_src emacs-lisp
(require 'diminish)
(eval-after-load "yasnippet" '(diminish 'yas-minor-mode))
(eval-after-load "undo-tree" '(diminish 'undo-tree-mode))
(eval-after-load "guide-key" '(diminish 'guide-key-mode))
(eval-after-load "smartparens" '(diminish 'smartparens-mode))
(eval-after-load "guide-key" '(diminish 'guide-key-mode))
(eval-after-load "eldoc" '(diminish 'eldoc-mode))
(diminish 'visual-line-mode)
#+end_src


#+RESULTS:
|

** Undo tree mode - visualize your undos and branches

People often struggle with the Emacs undo model, where there's really no concept of "redo" - you simply undo the undo. 
# 
This lets you use =C-x u= (=undo-tree-visualize=) to visually walk through the changes you've made, undo back to a certain point (or redo), and go down different branches.

#+begin_src emacs-lisp

  (use-package undo-tree
  :ensure t
    :init
    (progn
      (global-undo-tree-mode)
      (setq undo-tree-visualizer-timestamps t)
      (setq undo-tree-visualizer-diff t)))
#+end_src

#+RESULTS:
: t

** UTF-8

From http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html
#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+end_src

** Beacon mode
Flashes cursor when you scroll
#+BEGIN_SRC emacs-lisp
(use-package beacon
:ensure t
:config
(progn
(beacon-mode 1)
(setq beacon-push-mark 35)
(setq beacon-color "#666600")))
#+END_SRC

#+RESULTS:
** h1-highlight-line
#+BEGIN_SRC emacs-lisp
(use-package hl-line
:init
(global-hl-line-mode t))

#+END_SRC

#+RESULTS:

* Navigation
** ibuffer 
bind to ibuffer rather than list buffers
#+BEGIN_SRC emacs-lisp
(defalias 'list-buffers 'ibuffer-other-window) ; make ibuffer default
#+END_SRC

#+RESULTS:
: list-buffers


** Counsel
#+BEGIN_SRC emacs-lisp
(use-package counsel
:ensure t
)

#+END_SRC
** Swiper
#+begin_src emacs-lisp
(use-package swiper
:ensure t
:config
(progn
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(global-set-key "\C-s" 'swiper)
(global-set-key "\C-r" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key [f6] 'ivy-resume) 
(setq ivy-display-style 'fancy)
(defun bjm-swiper-recenter (&rest args)
  "recenter display after swiper"
  (recenter)
  )
(advice-add 'swiper :after #'bjm-swiper-recenter)
))

#+end_src

#+RESULTS:

** Avy
I'm not sure if I like this package - I have to check it out more but
it's out of the way here
#+begin_src emacs-lisp
(use-package avy
:ensure t
:bind (
("C-'" . avy-goto-char)
("C-:" . avy-goto-char-2)
)
:config
(progn
(avy-setup-default)
))
#+end_src

#+RESULTS:

** Pop to mark

Handy way of getting back to previous places.

#+begin_src emacs-lisp
(bind-key "C-x p" 'pop-to-mark-command)
(setq set-mark-command-repeat-pop t)
#+end_src

** Ace-windows
#+BEGIN_SRC emacs-lisp
(use-package ace-window
:ensure t
:init 
(progn
(global-set-key [remap other-window] 'ace-window)
;(setq aw-scope 'frame)
(custom-set-faces
 '(aw-leading-char-face
   ((t (:inherit ace-jump-face-foreground :height 3.0)))))
))
#+END_SRC

#+RESULTS:

** Browse-kill-ring - see what you've cut so that you can paste it       
Make sense of the kill ring! This lets you list the contents of the
kill ring and paste a specific item. You can also manipulate your kill
ring contents.

If you're new to Emacs, you might not yet know about what the kill
ring is. It stores the items that you cut (or kill, in Emacs terms).
You're not limited to pasting just the most recent item - you can
paste the second-to-the-last item you cut, and so on. I remember to
use =C-y= and =M-y= when going backwards in the kill ring, but I never
quite remember how to go forward, so browse-kill-ring makes it easier.

#+begin_src emacs-lisp
  (use-package browse-kill-ring
:ensure t
    :init 
    (progn 
      (browse-kill-ring-default-keybindings) ;; M-y
      (setq browse-kill-ring-quit-action 'save-and-restore)))      
#+end_src

#+RESULTS:
: t
** visual-regexp
#+begin_src emacs-lisp
(use-package visual-regexp :ensure t)
#+end_src
** Narrow and widen DWIM (endless parens)
#+BEGIN_SRC emacs-lisp
(defun narrow-or-widen-dwim (p)
  "If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
Intelligently means: region, org-src-block, org-subtree, or defun,
whichever applies first.
Narrowing to org-src-block actually calls `org-edit-src-code'.

With prefix P, don't widen, just narrow even if buffer is already
narrowed."
  (interactive "P")
  (declare (interactive-only))
  (cond ((and (buffer-narrowed-p) (not p)) (widen))
        ((region-active-p)
         (narrow-to-region (region-beginning) (region-end)))
        ((derived-mode-p 'org-mode)
         ;; `org-edit-src-code' is not a real narrowing command.
         ;; Remove this first conditional if you don't want it.
         (cond ((ignore-errors (org-edit-src-code))
                (delete-other-windows))
               ((org-at-block-p)
                (org-narrow-to-block))
               (t (org-narrow-to-subtree))))
        (t (narrow-to-defun))))

;; (define-key endless/toggle-map "n" #'narrow-or-widen-dwim)
;; This line actually replaces Emacs' entire narrowing keymap, that's
;; how much I like this command. Only copy it if that's what you want.
(define-key ctl-x-map "n" #'narrow-or-widen-dwim)

(eval-after-load 'org-src
  '(define-key org-src-mode-map
     "\C-x\C-s" #'org-edit-src-exit))



#+END_SRC
* Markdown 
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
:ensure t)

#+END_SRC

#+RESULTS:

* Org
** Org bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
:ensure t
:init
(progn
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
))
#+END_SRC
** Variables
#+BEGIN_SRC emacs-lisp
  (custom-set-variables
'(org-default-notes-file (concat org-directory "/notes.org"))
'(org-directory "~/Dropbox/orgfiles")
'(org-export-html-postamble nil)
'(org-hide-leading-stars t)
'(org-startup-folded (quote overview))
'(org-startup-indented t)
   )

  (setq org-file-apps
        (append '(
                  ("\\.pdf\\'" . "evince %s")
                  ) org-file-apps ))
 
(global-set-key "\C-ca" 'org-agenda)

(require 'ox-odt)
#+END_SRC   

#+RESULTS:
| org-startup-indented | t |
** Babel
#+begin_src emacs-lisp

(use-package ob-mongo
:ensure t  :init
(progn
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (emacs-lisp . t)
   (scheme . t )
   (java . t )
(C . t)
   (mongo . t )
   (ditaa . t)
   (dot . t)
   (org . t)
   (gnuplot . t )
   (sh . t )
   (haskell . t )
   (latex . t )
   ))))
#+end_src
** GnuPlot (for babel)
#+begin_src emacs-lisp
(use-package gnuplot
:ensure t)
#+end_src
** Publish
#+begin_src emacs-lisp
(use-package ox-twbs
:ensure ox-twbs
)
(setq org-publish-project-alist
      '(
           ("blog-posts"
		:base-directory "~/gh/cestlaz.github.io/_org/"
      		:base-extension "org"
		:publishing-directory "~/gh/cestlaz.github.io/_drafts/"
		:recursive nil		      
;      		:publishing-function org-publish-org-to-html
:publishing-function org-html-publish-to-html
;:publishing-function org-twbs-publish-to-html
      		:headline-levels 4
		:auto-index nil
		:htmlized-source t
		:section-numbers nil
		:toc nil
      		:auto-preamble nil
		:table-of-contents nil
		:html-extension "html"		
		:body-only t
      		)
           ("apcs-hw"
		:base-directory "~/gh/stuycs-apcs-z.github.io/_org/"
      		:base-extension "org"
		:publishing-directory "~/gh/stuycs-apcs-z.github.io/_posts/"
		:recursive nil		      
;      		:publishing-function org-publish-org-to-html
      		:publishing-function org-html-publish-to-html
      		:headline-levels 4
		:auto-index nil
		:section-numbers nil
		:toc nil
      		:auto-preamble nil
		:table-of-contents nil
		:html-extension "html"		
		:body-only t
      		))

      )
#+end_src

#+RESULTS:
| blog-posts | :base-directory | ~/gh/cestlaz.github.io/_org/       | :base-extension | org | :publishing-directory | ~/gh/cestlaz.github.io/_drafts/      | :recursive | nil | :publishing-function | org-html-publish-to-html | :headline-levels | 4 | :auto-index | nil | :htmlized-source | t   | :section-numbers | nil | :toc           | nil | :auto-preamble     | nil | :table-of-contents | nil  | :html-extension | html | :body-only | t |
| apcs-hw    | :base-directory | ~/gh/stuycs-apcs-z.github.io/_org/ | :base-extension | org | :publishing-directory | ~/gh/stuycs-apcs-z.github.io/_posts/ | :recursive | nil | :publishing-function | org-html-publish-to-html | :headline-levels | 4 | :auto-index | nil | :section-numbers | nil | :toc             | nil | :auto-preamble | nil | :table-of-contents | nil | :html-extension    | html | :body-only      | t    |            |   |

** reveal
#+begin_src emacs-lisp
(setq org-reveal-mathjax t)
(use-package ox-reveal
:ensure ox-reveal)
(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
#+end_src

#+RESULTS:
: https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.2.0/js/reveal.min.js

** org-complete
#+BEGIN_SRC emacs-lisp
(use-package org-ac
:ensure t
:init (progn
(require 'org-ac)
(org-ac/config-default)

))

#+END_SRC
** org-present
#+BEGIN_SRC emacs-lisp
(use-package org-present
:ensure t)

#+END_SRC
** Hydra for agenda keys (v) in agenda view
This doesn't seem to work
#+BEGIN_SRC emacs-lisp :tangle no

(define-key org-agenda-mode-map
    "v" 'hydra-org-agenda-view/body)

(defun org-agenda-cts ()
  (let ((args (get-text-property
               (min (1- (point-max)) (point))
               'org-last-args)))
    (nth 2 args)))

(defhydra hydra-org-agenda-view (:hint nil)
  "
_d_: ?d? day        _g_: time grid=?g? _a_: arch-trees
_w_: ?w? week       _[_: inactive      _A_: arch-files
_t_: ?t? fortnight  _f_: follow=?f?    _r_: report=?r?
_m_: ?m? month      _e_: entry =?e?    _D_: diary=?D?
_y_: ?y? year       _q_: quit          _L__l__c_: ?l?"
  ("SPC" org-agenda-reset-view)
  ("d" org-agenda-day-view
       (if (eq 'day (org-agenda-cts))
           "[x]" "[ ]"))
  ("w" org-agenda-week-view
       (if (eq 'week (org-agenda-cts))
           "[x]" "[ ]"))
  ("t" org-agenda-fortnight-view
       (if (eq 'fortnight (org-agenda-cts))
           "[x]" "[ ]"))
  ("m" org-agenda-month-view
       (if (eq 'month (org-agenda-cts)) "[x]" "[ ]"))
  ("y" org-agenda-year-view
       (if (eq 'year (org-agenda-cts)) "[x]" "[ ]"))
  ("l" org-agenda-log-mode
       (format "% -3S" org-agenda-show-log))
  ("L" (org-agenda-log-mode '(4)))
  ("c" (org-agenda-log-mode 'clockcheck))
  ("f" org-agenda-follow-mode
       (format "% -3S" org-agenda-follow-mode))
  ("a" org-agenda-archives-mode)
  ("A" (org-agenda-archives-mode 'files))
  ("r" org-agenda-clockreport-mode
       (format "% -3S" org-agenda-clockreport-mode))
  ("e" org-agenda-entry-text-mode
       (format "% -3S" org-agenda-entry-text-mode))
  ("g" org-agenda-toggle-time-grid
       (format "% -3S" org-agenda-use-time-grid))
  ("D" org-agenda-toggle-diary
       (format "% -3S" org-agenda-include-diary))
  ("!" org-agenda-toggle-deadlines)
  ("["
   (let ((org-agenda-include-inactive-timestamps t))
     (org-agenda-check-type t 'timeline 'agenda)
     (org-agenda-redo)))
  ("q" (message "Abort") :exit t))

#+END_SRC
** org capture and agenda stuff
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c") 'org-capture)


  (setq org-agenda-files (list "~/Dropbox/orgfiles/gcal.org"
                               "~/Dropbox/orgfiles/i.org"
                               "~/Dropbox/orgfiles/schedule.org"))


  (setq org-capture-templates
        '(("a" "Appointment" entry (file+headline  "~/Dropbox/orgfiles/gcal.org" "Appointments")
           "* TODO %?\n:PROPERTIES:\n\n:END:\nDEADLINE: %^T \n %i\n")
          ("n" "Note" entry (file+headline "~/Dropbox/orgfiles/notes.org" "Notes")
           "* Note %?\n%T")
           ("l" "Link" entry (file+headline "~/Dropbox/orgfiles/links.org" "Links")
           "* %? %^L %^g \n%T" :prepend t)
          ("b" "Blog idea" entry (file+headline "~/Dropbox/orgfiles/i.org" "Blog Topics")
           "* %?\n%T" :prepend t)
          ("t" "To Do Item" entry (file+headline "~/Dropbox/orgfiles/i.org" "To Do Items")
           "* %?\n%T" :prepend t)

          ("j" "Journal" entry (file+datetree "~/Dropbox/journal.org")
           "* %?\nEntered on %U\n  %i\n  %a")))


  (defadvice org-capture-finalize 
      (after delete-capture-frame activate)  
    "Advise capture-finalize to close the frame"  
    (if (equal "capture" (frame-parameter nil 'name))  
        (delete-frame)))

  (defadvice org-capture-destroy 
    (after delete-capture-frame activate)  
     "Advise capture-destroy to close the frame"  
     (if (equal "capture" (frame-parameter nil 'name))  
         (delete-frame)))  

  (use-package noflet
  :ensure t )
  (defun make-capture-frame ()
           "Create a new frame and run org-capture."
           (interactive)
           (make-frame '((name . "capture")))
           (select-frame-by-name "capture")
           (delete-other-windows)
           (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
             (org-capture)))
  ;;emacsclient -ne  '(make-capture-frame)'
(add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))
#+END_SRC

#+RESULTS:
: make-capture-frame

** org and calfw
#+BEGIN_SRC emacs-lisp
(use-package calfw
:ensure t
:config
(require 'calfw) 
(require 'calfw-org)
(setq cfw:org-overwrite-default-keybinding t)
(require 'calfw-ical)

(load-file "~/Dropbox/shared/calfw.el")

)
(use-package calfw-gcal
:ensure t
:config
(require 'calfw-gcal))

#+END_SRC

#+RESULTS:
: t

* latex
#+begin_src emacs-lisp
(use-package tex
:ensure auctex)

(defun tex-view ()
    (interactive)
    (tex-send-command "evince" (tex-append tex-print-file ".pdf")))

#+end_src

* Programming
** Misc
#+begin_src emacs-lisp
(setq-default tab-width 2)

(use-package ggtags
:ensure t)
#+end_src

#+RESULTS:

** smartparens
#+BEGIN_SRC emacs-lisp 

(use-package smartparens
:ensure smartparens
:config 
(progn
(require 'smartparens-config)
(require 'smartparens-html)
(require 'smartparens-python)
(require 'smartparens-latex)
(smartparens-global-mode t)
(show-smartparens-global-mode t)
)

)



#+END_SRC


#+RESULTS:
: t

** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
:ensure t
:init
(progn
(bind-key "C-x g" 'magit-status)
))
#+END_SRC

#+RESULTS:

** Autocomplete
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
:ensure t
:init
(progn
(ac-config-default)
(global-auto-complete-mode t)
))

#+END_SRC

#+RESULTS:

** yasnippets
#+BEGIN_SRC emacs-lisp :tangle no
(use-package yasnippet
:ensure t
:init
(progn
(yas-global-mode 1)
)
)
#+END_SRC

#+RESULTS:

** Aggresive indent
#+begin_src emacs-lisp
(use-package aggressive-indent
:ensure t
:init (progn
  (global-aggressive-indent-mode 1)
)
)

#+end_src
** Rainbow delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
:ensure t
  :init (rainbow-delimiters-mode))
#+end_src
** projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
:ensure t
:init (progn
(projectile-global-mode)
(setq projectile-completion-system 'ivy)
))

#+END_SRC

#+RESULTS:

** Flycheck
#+begin_src emacs-lisp
(use-package flycheck 
:ensure t
:init
(global-flycheck-mode t))
(use-package flycheck-pyflakes
:ensure t
)
#+end_src
** Python
#+BEGIN_SRC emacs-lisp
(setq py-python-command "python3")
(setq python-shell-interpreter "python3")

(use-package jedi
:ensure t
:init
(progn
(add-hook 'python-mode-hook 'jedi:setup)
(add-hook 'python-mode-hook 'jedi:ac-setup)
))



#+END_SRC

#+RESULTS:

** Web
#+BEGIN_SRC emacs-lisp
(use-package web-mode
:ensure t
:init
(progn
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("/some/react/path/.*\\.js[x]?\\'" . web-mode))

(setq web-mode-content-types-alist
  '(("json" . "/some/path/.*\\.api\\'")
    ("xml"  . "/other/path/.*\\.api\\'")
    ("jsx"  . "/some/react/path/.*\\.js[x]?\\'")))
))


(use-package js2-mode
:ensure t
:ensure ac-js2
:init
(progn
(add-hook 'js-mode-hook 'js2-minor-mode)
(add-hook 'js2-mode-hook 'ac-js2-mode)
))

(use-package js2-refactor
:ensure t
:config 
(progn
(js2r-add-keybindings-with-prefix "C-c C-m")
;; eg. extract function with `C-c C-m ef`.
(add-hook 'js2-mode-hook #'js2-refactor-mode)))
#+END_SRC

#+RESULTS:

** Clojure
#+BEGIN_SRC emacs-lisp
(use-package cider
:ensure cider
:ensure ac-cider
:ensure clojure-snippets
:config (progn
(if (not (boundp 'cider-lein-command))
(setq cider-lein-command "/home/zamansky/bin/lein"))
(add-hook 'cider-mode-hook #'eldoc-mode)
(setq nrepl-log-messages nil)
(setq nrepl-hide-special-buffers t)
(add-hook 'cider-mode-hook 'ac-flyspell-workaround)
(add-hook 'cider-mode-hook 'ac-cider-setup)
(add-hook 'cider-repl-mode-hook 'ac-cider-setup)
(eval-after-load "auto-complete"
  '(progn
     (add-to-list 'ac-modes 'cider-mode)
     (add-to-list 'ac-modes 'cider-repl-mode)))

)
)

(use-package 4clojure 
:ensure t
:config
(progn
(defadvice 4clojure-open-question (around 4clojure-open-question-around)
  "Start a cider/nREPL connection if one hasn't already been started when
opening 4clojure questions"
  ad-do-it
  (unless cider-current-clojure-buffer
    (cider-jack-in)))
))

#+END_SRC

#+RESULTS:

** Javascript
#+BEGIN_SRC emacs-lisp
(use-package tern
:ensure tern
:ensure tern-auto-complete
:config
(progn
(add-hook 'js-mode-hook (lambda () (tern-mode t)))
(add-hook 'js2-mode-hook (lambda () (tern-mode t)))
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(tern-ac-setup)
))

#+END_SRC
* Key binding
#+begin_src emacs-lisp


(global-set-key (kbd "\e\ei")
		(lambda () (interactive) (find-file "~/Dropbox/orgfiles/i.org")))

(global-set-key (kbd "\e\eb")
		(lambda () (interactive) (find-file "~/Dropbox/orgfiles/links.org")))

(global-set-key (kbd "\e\ea")
		(lambda () (interactive) (find-file "~/Dropbox/orgfiles/apcs.org")))

(global-set-key (kbd "\e\es")
		(lambda () (interactive) (find-file "~/Dropbox/orgfiles/softdev.org")))
(global-set-key (kbd "\e\ec")
		(lambda () (interactive) (find-file "~/Dropbox/orgfiles/cstuy.org")))

#+end_src

#+RESULTS:
| lambda | nil | (interactive) | (find-file ~/Dropbox/orgfiles/cstuy.org) |

* Avy
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind (("M-s" . avy-goto-word-1)))

#+END_SRC
* Misc			  
** edit-server for edit with emacs
#+begin_src emacs-lisp
(use-package edit-server
:ensure t
  :init (edit-server-start)
)
#+end_src

#+RESULTS:
: t
** Try - try packages only for this session
#+BEGIN_SRC emacs-lisp
(use-package try
:ensure t)

#+END_SRC
** fill/unfill paragraph
#+BEGIN_SRC emacs-lisp
(defun endless/fill-or-unfill ()
  "Like `fill-paragraph', but unfill if used twice."
  (interactive)
  (let ((fill-column
         (if (eq last-command 'endless/fill-or-unfill)
             (progn (setq this-command nil)
                    (point-max))
           fill-column)))
    (call-interactively #'fill-paragraph)))

(global-set-key [remap fill-paragraph]
                #'endless/fill-or-unfill)

#+END_SRC
** dired+
#+BEGIN_SRC emacs-lisp
  (use-package dired+
    :ensure t
    :config (require 'dired+)
    )
#+END_SRC

#+RESULTS:
: t

* Mu4e
#+BEGIN_SRC emacs-lisp
(load-file  "~/Dropbox/shared/mu4econfig.el")
#+END_SRC
